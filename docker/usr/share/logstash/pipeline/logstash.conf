input {
    # Usage of docker GELF log driver:
    # docker run --log-driver=gelf --log-opt gelf-address=udp://localhost:12201 -ti some-image:latest
    gelf {
        port => "${INPUT_GELF_PORT:12201}"
        port_tcp => "${INPUT_GELF_PORT:12201}"
        port_udp => "${INPUT_GELF_PORT:12201}"
        use_tcp => true
        use_udp => true
    }

    tcp {
        port => "${INPUT_JSON_TCP_PORT:51401}"
        codec => json
    }
    tcp {
        port => "${INPUT_LINE_TCP_PORT:51402}"
        codec => line
    }

    # filebeat all
    redis {
        data_type => list
        key => filebeat
        host => "${INPUT_REDIS_HOST:standalone.redis}"
        password => "${INPUT_REDIS_PASS:-admin_pass}"
        port => "${INPUT_REDIS_PORT:6379}"
    }
    # redis stdout logs
    redis {
        data_type => list
        key => logspout
        host => "${INPUT_REDIS_HOST:standalone.redis}"
        password => "${INPUT_REDIS_PASS:-admin_pass}"
        port => "${INPUT_REDIS_PORT:6379}"
    }
}

filter {
    # see: https://stackoverflow.com/questions/34075538/elk-process-multiline-logs-from-multiple-docker-images
    multiline {
        pattern => "^%{TIMESTAMP_ISO8601}"
        negate => true
        what => "previous"
        source => "short_message"
        stream_identity => "%{host}.%{container_id}"
    }

    # nginx
    if "nginx" in [tags] {
        grok {
            match => {
                "message" => "%{IP:remote_addr} - \[%{HTTPDATE:time_local}\] %{NUMBER:request_time} %{NUMBER:upstream_response_time} \"%{NOTSPACE:method} %{NOTSPACE:url}\" %{NOTSPACE:status} %{NOTSPACE:body_bytes_sent} %{QUOTEDSTRING:http_referer} %{QUOTEDSTRING:http_user_agent} %{QUOTEDSTRING:http_x_forwarded_for}"
            }
        }

        grok {
            match => {
                "url" => "%{URIPROTO:scheme}://"
            }
        }

        geoip {
            source => "remote_addr"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}"]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"]
        }

        mutate {
            convert => [ "[geoip][coordinates]", "float"]
            convert => ["request_time", "float"] 
            convert => ["upstream_response_time", "float"] 
        }
   }

    # All docker stdout "logsput"
    if [@type] == "logspout" {
        mutate {add_field => {"type" => "logspout"}}
        mutate {add_field => {"tags" => "logspout"}}
    }

    # STANDARG LOG "[2018-04-08T19:58:55.132+08:00] [INFO] [guardian] [guardian-openapi] - info"
    grok {
        match => {
            "message" => "^\[%{TIMESTAMP_ISO8601:time}\] \[%{LOGLEVEL:level}\] \[%{NOTSPACE:project}\] \[%{NOTSPACE:application}\] - %{GREEDYDATA:info}"
        }
    }

    # STANDARD JSON
    if [project] and [application] and [level] {
        mutate {add_tag => ["standard_log"]}
    }
}

output {
    # stdout { codec => rubydebug }
    if "nginx" in [tags] { # filebeat
        elasticsearch {
            hosts => ["${OUTPUT_ELASTICSEARCH_HOSTS:standalone.elk-elasticsearch:9200}"]
            index => "logstash-nginx-%{+YYYY-MM-dd}"
            user => "logstash_system"
            password => "changeme"
        }
    } else if "filebeat" in [tags] {
        elasticsearch {
            hosts => ["${OUTPUT_ELASTICSEARCH_HOSTS:standalone.elk-elasticsearch:9200}"]
            index => "logstash-filebeat-%{+YYYY-MM-dd}"
            user => "logstash_system"
            password => "changeme"
        }
    } else if [@type] == "logspout" {
        # docker stdout logs
        elasticsearch {
            hosts => ["${OUTPUT_ELASTICSEARCH_HOSTS:standalone.elk-elasticsearch:9200}"]
            index => "logstash-docker_logspout-%{+YYYY-MM-dd}"
            user => "logstash_system"
            password => "changeme"
        }
    } else if "standard_log" in [tags] {
        # STARDAND AUTO CREATE INDEX
        elasticsearch {
            hosts => ["${OUTPUT_ELASTICSEARCH_HOSTS:standalone.elk-elasticsearch:9200}"]
            index => "logstash-%{project}-%{+YYYY-MM-dd}"
            user => "logstash_system"
            password => "changeme"
        }
    } else {
        # Not set
        elasticsearch {
            hosts => ["${OUTPUT_ELASTICSEARCH_HOSTS:standalone.elk-elasticsearch:9200}"]
            index => "logstash-unknown_project-%{+YYYY-MM-dd}"
            user => "logstash_system"
            password => "changeme"
        }
        file {
            path => "/usr/share/logstash/log/test.log"
            codec => line { format => "%{message}"}
        } 
    }
}
